<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Webapps | Pallavi Anderson]]></title>
  <link href="http://asynchrotron.com/blog/categories/webapps/atom.xml" rel="self"/>
  <link href="http://asynchrotron.com/"/>
  <updated>2013-12-28T17:30:04-06:00</updated>
  <id>http://asynchrotron.com/</id>
  <author>
    <name><![CDATA[Pallavi Anderson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Realtime Maps With Meteor and Leaflet - Part 1]]></title>
    <link href="http://asynchrotron.com/blog/2013/12/27/realtime-maps-with-meteor-and-leaflet/"/>
    <updated>2013-12-27T20:51:10-06:00</updated>
    <id>http://asynchrotron.com/blog/2013/12/27/realtime-maps-with-meteor-and-leaflet</id>
    <content type="html"><![CDATA[<p><span class='caption-wrapper'><img class='caption' src='https://raw.github.com/meteor/meteor/devel/examples/parties/public/soma.png">https://raw.github.com/meteor/meteor/devel/examples/parties/public/soma.png</a>' width='350' height='350' title='the map is actually a static image'><span class='caption-text'>the map is actually a static image</span></span>
The <a href="https://www.meteor.com/examples/parties">Parties example</a> bundled with <a href="http://www.meteor.com">Meteor</a> is a nifty demonstration of the framework&rsquo;s core principles. It also shows how we might implement fine-grained data access control to limit who can see and edit specific items in a collection &ndash; in this case which users are allowed to RSVP to parties. But the application isn&rsquo;t nearly as useful as it could be because it displays a <a href="https://github.com/meteor/meteor/blob/devel/examples/parties/public/soma.png">500 x 500 pixel image of downtown San Francisco</a> as the faux map. This means that we cannot pan or zoom the &ldquo;map,&rdquo; nor can we initialize it to any other location or zoom level, and when we double click the image to create a party, D3 draws a circle to mark the position of the click in relation to the <em>image element in the browser window</em>, and not at geospatial coordinates.</p>

<p>I decided to refactor the example to use <a href="http://leafletjs.com/">Leaflet.js</a> to make a real map that looks and feels as close to the original as possible. The color-coded circle markers (pink for private, blue for public parties) labeled with the number of RSVPs are nice and lightweight, and I like how the larger animated circle is used to indicate which party is currently selected, with details about the party shown in the sidebar. It&rsquo;s a useful pattern for showing details about an individual map marker without using the standard popup approach which occludes part of the map.</p>

<p>TLDR; End result: <a href="http://chicago-parties.meteor.com">http://chicago-parties.meteor.com</a> and <a href="https://github.com/pkaushik/parties">source code for the complete application</a>. You need a github account to log in, to create or RSVP to parties.</p>

<h3>Setting the Stage</h3>


<p>First off, since we&rsquo;ll no longer be calculating relative x and y coordinates to position circles on a jpeg image, the map does not need to be of a fixed size. We modify the page template to use Bootstrap&rsquo;s fluid classes to generate a responsive layout, and include the following boilerplate to adjust the map&rsquo;s size as the window is resized. This pattern is standard practice when creating responsive Leaflet maps; not specific to Meteor.</p>

<p>``` html
<div class="container-fluid">
  <div class="row-fluid"></p>

<pre><code>&lt;div class="span4"&gt;
  {{&gt; details}}
  {{#if currentUser}}
  &lt;div class="pagination-centered"&gt;
    &lt;em&gt;&lt;small&gt;Double click the map to post a party!&lt;/small&gt;&lt;/em&gt;
  &lt;/div&gt;
  {{/if}}
&lt;/div&gt;
&lt;div class="span8"&gt;
    {{&gt; map}}
&lt;/div&gt;
</code></pre>

<p>  </div>
</div>
```</p>

<p><code>js
$(window).resize(function () {
  var h = $(window).height(), offsetTop = 90; // Calculate the top offset
  $mc = $('#map_canvas');
  $mc.css('height', (h - offsetTop));
}).resize();
</code></p>

<h3>Map Initialization</h3>


<p>Map initialization code goes into the template&rsquo;s <code>rendered()</code> callback. Stamen&rsquo;s <a href="http://maps.stamen.com/toner/#12/37.7706/-122.3782">toner themed map tiles</a> are a nice replacement for the black &amp; white map image. Disabling click and touch zoom lets us reserve those actions for creating a new party, and adjusting the base map&rsquo;s opacity improves the visibility of markers against the very dark toner theme.</p>

<p>``` js
map = L.map($(&lsquo;#map_canvas&rsquo;), {
  doubleClickZoom: false,
  touchZoom: false
}).setView(new L.LatLng(41.8781136, -87.66677956445312), 13);</p>

<p>L.tileLayer(&lsquo;<a href="http://">http://</a>{s}.tile.stamen.com/toner/{z}/{x}/{y}.png&rsquo;, {opacity: .5}).addTo(map);
```</p>

<p>Next we replace the map template&rsquo;s event handler from the original example with Leaflet&rsquo;s <code>"dblclick"</code> event handler which conveniently returns a Leaflet <code>LatLng</code> as the argument to its callback.</p>

<p>``` js
map.on(&ldquo;dblclick&rdquo;, function(e) {
  if (! Meteor.userId()) // must be logged in to create parties</p>

<pre><code>return;
</code></pre>

<p>  Session.set(&ldquo;createCoords&rdquo;, e.latlng);
  &hellip;
  &hellip;
});
```</p>

<h3>Creating and Saving a Party to the Database</h3>


<p>The code to create a new party using a <code>Meteor.methods()</code> call is virtually the same as in the original example except that the method now takes the <code>LatLng</code> that we saved as <code>Session.createCoords</code>. When the new party has been created and successfully saved in a server-side mongo collection, we get a successful callback and save the new party&rsquo;s <code>_id</code> to the <code>Session.selected</code> variable. This ensures that the most recently created party is always selected.</p>

<p>``` js
var title = template.find(&ldquo;.title&rdquo;).value;
var description = template.find(&ldquo;.description&rdquo;).value;
var public = ! template.find(&ldquo;.private&rdquo;).checked;
var latlng = Session.get(&ldquo;createCoords&rdquo;);</p>

<p>Meteor.call(&lsquo;createParty&rsquo;, {
  title: title,
  description: description,
  latlng: latlng,
  public: public
}, function (error, partyId) {
  if (! error) {</p>

<pre><code>Session.set("selected", partyId);
...
...
</code></pre>

<p>  }
});
```</p>

<h3>Adding, Removing, and Updating Markers on the Map in Realtime</h3>


<p>So far, we&rsquo;ve saved a newly created party into the server-side Parties mongo collection and behind the scenes, Meteor has transmitted it back to the client-side monomongo collection with the same name. We can verify this by typing <code>Parties.findOne()</code> into the JavaScript console.</p>

<p>Let&rsquo;s now observe changes to the client&rsquo;s monomongo collection and automatically draw a map marker every time a new party is added to the collection. Since this only needs to be set up once, we can put the following code in the map template&rsquo;s <code>created()</code> callback. This replaces the D3 circle drawing code from the original example.</p>

<p>``` js
var map, markers = {};</p>

<p>Template.map.created = function() {
  Parties.find({}).observe({</p>

<pre><code>added: function(party) {
  var marker = new L.Marker(party.latlng, {
    _id: party._id,
    icon: createIcon(party)
  }).on('click', function(e) {
    Session.set("selected", e.target.options._id);
  });      
  map.addLayer(marker);
  markers[marker.options._id] = marker;
},
...
...
changed: function(party) {
  var marker = markers[party._id];
  if (marker) marker.setIcon(createIcon(party));
},
removed: function(party) {
  var marker = markers[party._id];
  if (map.hasLayer(marker)) {
    map.removeLayer(marker);
    delete markers[party._id];
  }
}
</code></pre>

<p>  });
}
<code>
The</code>added()<code>callback stores a reference to the new marker in a hash keyed by</code>Party._id<code>. This is useful since we need to efficiently update / delete markers when the RSVP count changes or a party is deleted. The</code>createIcon<code>function uses the new lightweight [</code>DivIcon<code>](http://leafletjs.com/reference.html#divicon) that uses a simple</code>div<code>element instead of an image and CSS</code>border-radius<code>to style the div as a circle of the appropriate color. The</code>attending()<code>from the original example returns the number of Yes RSVPs. CSS</code>line-height<code>(set tot he height of the</code>div<code>) and</code>vertical-align``` used in combination ensure the HTML text is vertically centered.</p>

<p>``` js
var createIcon = function(party) {
  var className = &lsquo;leaflet-div-icon &rsquo;;
  className += party.public ? &lsquo;public&rsquo; : &lsquo;private&rsquo;;
  return L.divIcon({</p>

<pre><code>iconSize: [30, 30], // set size to 30px x 30px
html: '&lt;b&gt;' + attending(party) + '&lt;/b&gt;',
className: className  
</code></pre>

<p>  });
}
<code>
</code> css
.leaflet-div-icon {</p>

<pre><code>border-radius: 50%;
border: none;
line-height: 30px; 
font-family: verdana;
text-align: center;
color: white;
opacity: .8;
vertical-align: middle;
</code></pre>

<p>}</p>

<p>.leaflet-div-icon.public { background: #49AFCD; }</p>

<p>.leaflet-div-icon.private { background: #DA4F49; }
```</p>

<p><em>Next: Updating and deleting parties, and animating the selected party indicator&hellip;</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Meteor!]]></title>
    <link href="http://asynchrotron.com/blog/2012/05/22/hello-meteor/"/>
    <updated>2012-05-22T15:22:00-05:00</updated>
    <id>http://asynchrotron.com/blog/2012/05/22/hello-meteor</id>
    <content type="html"><![CDATA[<p>Here are the <a href="https://speakerdeck.com/u/pkaushik/p/meteor">slides</a> from my <a href="http://www.meetup.com/js-chi/events/59833642">JS.Chi() talk on Meteor</a>. I will follow up with posts expanding on most of the slides in the presentation. This post, however, is for the benefit of all those who are feeling like they might be missing a step with frameworks like Backbone, Ember, (and now Meteor), et. al. It is an overview of the types of problems they&rsquo;re solving and includes recommendations for further reading.</p>

<script async class="speakerdeck-embed" data-id="4fbbc61f15a68f001f027e5a" data-ratio="1.2945638432364097" src="http://asynchrotron.com//speakerdeck.com/assets/embed.js"></script>




<br/>


<br/>




<h3>First a brief note about MVC</h3>


<p></p>

<p>The Model-View-Controller application architecture (MVC) is used in most modern applications to separate an application’s data from its business rules and user interface. Briefly, Models represent an application’s data and functions to access it. Views represent information presented to the user. Controllers represent intermediary resources required to generate Views. The MVC pattern isn&rsquo;t new (it can be traced back to Smalltalk), but it was popularized , along with the REST style of client-server API design, by server-side web frameworks such as Rails and Django.</p>

<h3>So what's all the fuss about JavaScript MVC frameworks (Backbone, Ember, et. al.)?</h3>


<p>If you think of the screens &ndash; or pages &ndash; in your application as different &ldquo;states&rdquo; in your application, server-side frameworks require a round trip back to the server when the user goes from one application state to another. This is fine for content-heavy apps or websites. Or if you&rsquo;re accessing the pages via an ethernet cable or 802.11. But when you move to high latency connections and along the continuum &mdash; and I believe it really is a continuum &mdash; from a web site to a web app, you can deliver a much better user experience if you avoid the server round trip for each state change, and instead switch from state to state on the client, within a single browser page load cycle.</p>

<p>This saves you all of the overhead of destroying and recreating the DOM tree, flushing browser context (JavaScript, CSS, etc.) on each new page load. You also are transmitting less data on the wire (or ether) since HTML is generated on the client, and only JSON passed over the network. Both of these factors (page refresh time and network traffic optimization) are significant when you consider the fact that more and more internet usage is taking place via mobiles and tablets.</p>

<p>You would still need a server to authenticate users and perform other privileged operations, and to store the &ldquo;official&rdquo; version of the data that different clients synchronize with, but instead of sending dynamically created HTML to the client (a la aforementioned server-side frameworks) the server would send as much data as needed (typically as JSON) to the client, and the client would create all of the different application states dynamically. The problem with this approach &mdash; and I&rsquo;ve been writing apps this way since 2008, without the benefit of any client side frameworks &mdash; is that they quickly turn into a mass of spaghetti code.</p>

<p>This is where the likes of Backbone, Ember, etc. come in. They are a re-imagination of the MVC application architecture for JavaScript application development in the client, where all (or nearly all) application states are handled in the client, in JavaScript. They provide a way to structure your JavaScript applications in a more organized MVC style.</p>

<p><a href="http://addyosmani.com/largescalejavascript/">Addy Osmani&rsquo;s articles</a>, and especially his <a href="http://addyosmani.github.com/backbone-fundamentals/">Backbone Fundamentals book</a> are a great place to start reading more about this. Although it&rsquo;s focused on one specific framework (Backbone), it has a good overview of MVC and how the pattern has moved from server side frameworks (like Rails, Django) to the client side (Backbone, et. al.).</p>

<p>I also wholeheartedly recommend his <a href="http://addyosmani.com/scalable-javascript-videos/">recent talks on providing structure to JavaScript apps</a>.</p>

<p>And this is a useful <a href="http://codebrief.com/2012/01/the-top-10-javascript-mvc-frameworks-reviewed/">comparison of various front-end frameworks</a>, although the conclusions should be taken with a grain of salt (it&rsquo;s one persons&rsquo;s perspective, and things are not quite as quantifiable as the article suggests).</p>

<p>So, all of these are client side frameworks, which solve the problems of a) separating client side code into MVC, and b) optionally, allowing views to &ldquo;observe&rdquo; client side models, so that views get updated automatically as the data in the models is updated or as new data arrives from the server.</p>

<p>This gets you pretty far, but all of these applications have something else in common which the previously mentioned MVC frameworks don&rsquo;t address: They need to send data back to the server and know if data has changed on the server. In other words, they need to synchronize client side models with the server side models.</p>

<h3>Enter Meteor.</h3>


<p></p>

<p><a href="http://meteor.com">Meteor</a> is a full stack framework for end-to-end JavaScript applications. The beauty of coding it all in JavaScript is that you can easily implement the observer pattern (views watching for changes to the models) all the way to the server side. Meteor apps can subscribe to models (or subsets of models) on the server, and meteor takes care of all of the plumbing. This really is the bleeding edge of JS today.</p>

<p>For more on the problems Meteor solves, read the <a href="http://docs.meteor.com/">meteor docs</a> from the intro section through to as many of the detailed concepts you&rsquo;re interested in. Or come to <a href="http://www.meetup.com/js-chi/events/59833642">my talk at JS.Chi()</a> and we will work through it together.</p>

<p>Have fun!</p>
]]></content>
  </entry>
  
</feed>
